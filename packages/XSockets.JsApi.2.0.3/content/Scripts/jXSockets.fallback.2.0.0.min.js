if ("WebSocket" in window === false) { window.WebSocket = function (a, b) { function d(a, b) { if (typeof a !== undefined && a !== "") { var c = a.split("&"); for (var d = 0; d < c.length; d++) { if (c[d].indexOf(b) > -1) { return c[d].split("=")[1] } } } return "" } $(window).bind("beforeunload", function () { c.close() }); var c = this; this.client = { guid: null }; this.handler = b; this.MessageEvent = function (a) { return { type: "message", data: JSON.stringify(a) } }; this.payload = function (a) { return { handler: c.handler, client: c.client.guid, Json: a } }; this.listener = function () { return { handler: c.handler, client: c.client.guid } }; this.readystate = 0; c.client.guid = d(a, "XSocketsClientStorageGuid"); this.ajax("/Fallback/Init", "GET", { handler: c.handler, client: c.client.guid }, true, function (a) { c.client.guid = JSON.parse(a.data).ClientGuid; c.readyState = 1; c.onmessage(new c.MessageEvent(a)); c.listen() }); return this }; window.WebSocket.prototype.close = function () { this.ajax("/Fallback/Close", "GET", { client: self.client.guid }, true, function () { }) }; window.WebSocket.prototype.readyState = 0; window.WebSocket.prototype.send = function (a) { var b = JSON.parse(a); if (b.event == "xsockets.xnode.open") return; if (b.event == "xsockets.unsubscribe") { this.ajax("/Fallback/Unind", "GET", { client: this.client.guid, event: JSON.parse(b.data).Event }, true, function () { }) } else if (b.event == "xsockets.subscribe") { this.ajax("/Fallback/Bind", "GET", { client: this.client.guid, event: JSON.parse(b.data).Event }, false, function () { }) } else { this.ajax("/Fallback/Trigger", "POST", this.payload(a), false, function () { }) } }; window.WebSocket.prototype.close = function () { $.getJSON("/Fallback/Close", { client: this.client.guid }).done(function () { sessionStorage.clear() }) }; window.WebSocket.prototype.ajax = function (a, b, c, d, e) { var f = { processData: true, dataType: "json", type: b, url: a, async: d, cache: false, success: e, data: c }; $.ajax(f) }; window.WebSocket.prototype.onmessage = function (a) { }; window.WebSocket.prototype.onerror = function (a) { }; window.WebSocket.prototype.listen = function () { var a = this; this.ajax("/Fallback/Listen", "POST", this.listener(), true, function (b) { $.each(b, function (b, c) { a.onmessage(a.MessageEvent(c)) }); a.listen() }) } }